{"version":3,"sources":["Filter.js","Table.js","Pagination.js","App.js","serviceWorker.js","index.js"],"names":["Filter","_ref","onchange","phones","react_default","a","createElement","className","onChange","event","target","value","type","Table","onclick","columnConfig","setcheck","setcheckg","check","twoclick","checked","Object","keys","map","el","key","onClick","title","phone","age","onDoubleClick","id","Pagination","focus","setPagination","quantityPage","Array","fill","_","i","App","name","isSortable","isSearchable","snippet","state","getPhones","bySort","checkGlobal","fragment","quantityInPage","curentPage","showPage","SetcountViewPages","count","_this","setState","number","visible","length","pagin","toConsumableArray","filter","Math","ceil","slicePaginator","arr","n","j","tmp","push","slice","colParam","filterPhone","_loop","index","toLowerCase","indexOf","editField","findIndex","autoFocus","onKeyDown","keyCode","blur","onBlur","defaultValue","hidden","sort","parSort","phoneSort","b","namea","nameb","setCheckGlobal","selectPhone","countTrue","arrPhones","bool","fetch","response","json","this","objectSpread","visibleTexarea","_this2","src_Pagination","src_Filter","src_Table","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.183be5f9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Filter = ({ onchange, phones }) => (\r\n  <span className=\"Search\">\r\n    Search: \r\n      <input  onChange={event => onchange(event.target.value)} type=\"text\" />\r\n  </span>\r\n);\r\n\r\nexport default Filter;","import React from \"react\";\r\n\r\nconst Table = ({ phones, onclick, columnConfig, setcheck, setcheckg, check, twoclick }) => {\r\n  return (\r\n    <div>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th><input onChange={() => setcheckg()} type=\"checkbox\" checked={check} /></th>\r\n              {Object.keys(columnConfig).map(el =>  (\r\n              <th \r\n                className=\"sort\" \r\n                key={el} onClick={() => onclick(el)}\r\n              >\r\n                {columnConfig[el].title}\r\n              </th>) )}\r\n          </tr>\r\n          {phones.map((phone) => {\r\n            return (\r\n              <tr key={phone.age}>\r\n                <td><input onChange={() => setcheck(phone)} type=\"checkbox\" checked={phone.check} /></td>\r\n                {Object.keys(columnConfig).map(el =>  (\r\n                    <td\r\n                      onDoubleClick={() => twoclick(el, phone.id, phone[el])} \r\n                      key={el}\r\n                      >\r\n                      {phone[el]}\r\n                    </td>) )}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\n\r\nconst Pagination = ({ focus, setPagination, quantityPage  }) => (\r\n    <span>\r\n        {Array(focus).fill('').map((_, i) => (\r\n            <button \r\n                key={i} \r\n                className={i === quantityPage ? \"Focus\" : \"\"} \r\n                onClick={() => setPagination(i)}>{i + 1}\r\n            </button>) \r\n        )}\r\n    </span>\r\n)\r\n\r\nexport default Pagination","import React from \"react\";\nimport Filter from \"./Filter\";\nimport Table from \"./Table\";\nimport Pagination from \"./Pagination\";\nimport './App.css';\n\n\nclass App extends React.Component {\n  columnConfig = {\n    name: {\n      title: 'Название', \n      isSortable: true, \n      isSearchable: true,\n    },\n    age: {\n      title: 'Возраст',\n      isSortable: true, \n    },\n    snippet: { \n      title: 'Описание',\n      isSortable: true,\n      isSearchable: false, \n    }\n  }\n  \n  state = {\n    getPhones: [],\n    phones: [],\n    value: \"\",\n    bySort: true,\n    checkGlobal: false,\n    fragment: '',\n    quantityInPage: 3,\n    curentPage: 0,\n  };\n\n  curentPage = 0;\n  showPage = 1;\n\n  async componentDidMount() {\n    const response = await fetch(\n      \"https://mate-academy.github.io/phone-catalogue-static/phones/phones.json\"\n    );\n    const phones = await response.json();\n    this.setState({\n      phones: phones.map(el => {\n        return { ...el, check: false, visible: true, visibleTexarea: true };\n      })\n    });\n  }\n\n  render() {\n    const phones = this.visible();\n    return (\n      <div className=\"Content\">\n        <h3 className=\"Datatable\">Datatable</h3>\n        \n        <select onChange={(event) => {\n          \n          this.SetcountViewPages( +event.target.value)}}>\n          <option>3</option>\n          <option>5</option>\n          <option>10</option>\n          <option>20</option>\n        </select>\n        <Pagination \n          \n          focus={this.showPage} \n          setPagination={this.setPagination} \n          quantityPage={this.curentPage}\n          \n        />\n        <Filter onchange={this.filter} phones={ phones } />\n        <Table \n          blur={this.blur}\n          twoclick={this.editField}\n          check={this.state.checkGlobal}\n          setcheckg={this.setCheckGlobal} \n          setcheck={this.setcheck} \n          columnConfig={this.columnConfig} \n          onclick={this.sort} \n          phones={phones} \n        />\n        <Pagination \n         \n          focus={this.showPage} \n          setPagination={this.setPagination} \n          quantityPage={this.curentPage}\n         \n        />\n      </div>\n    );\n  }\n\n  SetcountViewPages = (count) => {\n    this.setState({ quantityInPage: count } )\n  }\n\n  setPagination = (number) => { \n      this.curentPage = number;\n      this.setState({ curentPage: number })\n  }\n\n  visible = () => {\n    if (!this.state.phones.length) return [];\n\n    let visiblePhone = [...this.state.phones];\n    let pagin = visiblePhone.filter(el => el.visible === true);\n    \n    this.showPage = Math.ceil(pagin.length / this.state.quantityInPage);\n    \n    return this.slicePaginator(pagin, this.state.quantityInPage)  \n  }\n\n  slicePaginator = (arr, n) => {\n    let i, j, tmp = [];\n    for (i = 0, j = arr.length; i < j; i += n) {\n      tmp.push(arr.slice(i, i + n));\n    }\n    return tmp[this.curentPage] ? tmp[this.curentPage] : tmp;\n  }\n\n  filter = value => {\n    this.curentPage = 0;\n    const colParam = Object.keys(this.columnConfig)\n    let filterPhone = [...this.state.phones];\n    \n    for (let i = 0; i < colParam.length; i++) {\n      if (!this.columnConfig[colParam[i]].isSearchable) continue;\n\n      filterPhone.map((el, index) => {\n        el[colParam[i]].toLowerCase().indexOf(value) >= 0\n          ? (filterPhone[index].visible = true)\n          : (filterPhone[index].visible = false);\n      });\n    }\n   \n    this.setState({ value, phones: filterPhone } )\n   };\n\n   editField = (name, id, fragment) => {\n     let phones = [...this.state.phones];\n     let index = phones.findIndex(el => el.id === id);\n     \n     phones[index][name] = (\n      <textarea \n        autoFocus\n        onKeyDown={(event) => {\n          if (event.keyCode === 27) this.blur(event.target.value, name, index, event.keyCode);\n          if (event.keyCode === 13) this.blur(event.target.value, name, index, event.keyCode);\n          }\n        }\n        className=\"Textarea\"\n        onBlur={(event) => this.blur(event.target.value, name, index) }\n        defaultValue={phones[index][name]} hidden={false}>\n      </textarea>\n      );\n     this.setState({ phones, fragment });\n   }\n\n   blur = (value, name, id, keyCode) => {\n    if (keyCode === 27) value = this.state.fragment;\n\n    let phones = [...this.state.phones];\n    phones[id][name] = value;\n    this.setState({ phones })\n   }\n\n  sort = (parSort) => {\n    if (!this.columnConfig[parSort].isSortable) return;\n    const bySort = this.state.bySort;\n\n    let phones = [...this.state.phones];\n    const phoneSort = phones.sort(function(a, b) {\n      let namea = a[parSort]\n      let  nameb = b[parSort]\n      if (namea > nameb) return bySort ? 1 : -1;\n      if (namea < nameb) return bySort ? -1 : 1;\n      return 0;\n    });\n   \n    this.setState({ phones: phoneSort, bySort: !bySort });\n  }\n\n  setCheckGlobal = () => {\n    let phones = [...this.state.phones];\n    const check = !this.state.checkGlobal;\n    phones.map((el, i) => el.visible === true ? phones[i].check = check : '')\n\n    this.setState({ checkGlobal: check, phones })\n  }\n\n  setcheck = (phone) => {\n    let selectPhone = [...this.state.phones];\n    selectPhone.map((el, i) => selectPhone[i].id === phone.id \n      ? selectPhone[i].check = !selectPhone[i].check \n      : selectPhone[i].check);\n\n    let countTrue = 0;\n    let arrPhones = this.visible();\n    arrPhones.map(el => el.check === true ? countTrue++ : '');\n    let bool = countTrue === arrPhones.length  ? true : false;\n    \n    this.setState({ phones: selectPhone, checkGlobal: bool })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}