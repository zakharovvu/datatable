{"version":3,"sources":["Filter.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["Filter","_ref","onchange","phones","react_default","a","createElement","onChange","event","target","value","type","length","Table","onclick","columnConfig","setcheck","setcheckg","check","twoclick","blur","checked","Object","keys","map","el","className","key","onClick","title","phone","i","age","onDoubleClick","id","App","name","isSortable","isSearchable","snippet","state","getPhones","bySort","checkGlobal","fragment","visible","toConsumableArray","_this","filter","hendleFilter","colParam","filterPhone","_loop","index","toLowerCase","indexOf","setState","editField","findIndex","autoFocus","onKeyDown","keyCode","onBlur","defaultValue","hidden","hendleSort","parSort","phoneSort","sort","b","namea","nameb","setCheckGlobal","selectPhone","countTrue","arrPhones","bool","fetch","response","json","this","objectSpread","visibleTexarea","src_Filter","src_Table","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60ca6579.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Filter = ({ onchange, phones }) => (\r\n  <div>\r\n    <span>\r\n      <input onChange={event => onchange(event.target.value)} type=\"text\" />\r\n    </span>\r\n    <span> {phones.length}</span>\r\n  </div>\r\n);\r\n\r\nexport default Filter;","import React from \"react\";\r\n\r\nconst Table = ({ phones, onclick, columnConfig, setcheck, setcheckg, check, twoclick, blur }) => {\r\n  return (\r\n    <div>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th><input onChange={() => setcheckg()} type=\"checkbox\" checked={check} /></th>\r\n            {Object.keys(columnConfig).map(el =>  (\r\n              <th \r\n                className=\"sort\" \r\n                key={el} onClick={() => onclick(el)}\r\n              >\r\n                {columnConfig[el].title}\r\n              </th>) )}\r\n          </tr>\r\n          {phones.map((phone, i) => {\r\n            return (\r\n              <tr key={phone.age}>\r\n                <td><input onChange={() => setcheck(phone)} type=\"checkbox\" checked={phone.check} /></td>\r\n                {Object.keys(columnConfig).map(el =>  (\r\n                    <td\r\n                      onDoubleClick={() => twoclick(el, phone.id, phone[el])} \r\n                      key={el}\r\n                      >\r\n                      \r\n                      {phone[el]}\r\n                    </td>) )}\r\n              </tr>\r\n              \r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React from \"react\";\nimport Filter from \"./Filter\";\nimport Table from \"./Table\";\nimport './App.css';\n\nclass App extends React.Component {\n  columnConfig = {\n    name: {\n      title: 'Название', \n      isSortable: true, \n      isSearchable: true,\n    },\n    age: {\n      title: 'Возраст',\n      isSortable: true, \n    },\n    snippet: { \n      title: 'Описание',\n      isSortable: true,\n      isSearchable: true, \n    }\n  }\n  \n  state = {\n    getPhones: [],\n    phones: [],\n    value: \"\",\n    bySort: true,\n    checkGlobal: false,\n    fragment: '',\n  };\n\n  async componentDidMount() {\n    const response = await fetch(\n      \"https://mate-academy.github.io/phone-catalogue-static/phones/phones.json\"\n    );\n    const phones = await response.json();\n    this.setState({\n      phones: phones.map(el => {\n        return { ...el, check: false, visible: true, visibleTexarea: true };\n      })\n    });\n  }\n\n  render() {\n    const phones = this.visible();\n    return (\n      <div>\n        <Filter onchange={this.hendleFilter} phones={phones} />\n        <Table \n          blur={this.blur}\n          twoclick={this.editField}\n          check={this.state.checkGlobal}\n          setcheckg={this.setCheckGlobal} \n          setcheck={this.setcheck} \n          columnConfig={this.columnConfig} \n          onclick={this.hendleSort} \n          phones={phones} \n        />\n      </div>\n    );\n  }\n\n  visible = () => {\n    let visiblePhone = [...this.state.phones];\n    return visiblePhone.filter(el => el.visible === true);\n  }\n\n  hendleFilter = value => {\n    const colParam = Object.keys(this.columnConfig)\n    let filterPhone = [...this.state.phones];\n    \n    for (let i = 0; i < colParam.length; i++) {\n      if (!this.columnConfig[colParam[i]].isSearchable) continue;\n\n      filterPhone.map((el, index) => {\n        el[colParam[i]].toLowerCase().indexOf(value) >= 0\n          ? (filterPhone[index].visible = true)\n          : (filterPhone[index].visible = false);\n      });\n    }\n    \n    this.setState({ value, phones: filterPhone } )\n   };\n\n   editField = (name, id, fragment) => {\n     let phones = [...this.state.phones];\n     let index = phones.findIndex(el => el.id === id);\n     \n     phones[index][name] = (\n      <textarea \n        autoFocus\n        onKeyDown={(event) => {\n          if (event.keyCode === 27) this.blur(event.target.value, name, index, event.keyCode);\n          if (event.keyCode === 13) this.blur(event.target.value, name, index, event.keyCode);\n          }\n        }\n        className=\"Textarea\"\n        onBlur={(event) => this.blur(event.target.value, name, index) }\n        defaultValue={phones[index][name]} hidden={false}>\n      </textarea>\n      );\n     this.setState({ phones, fragment });\n   }\n\n   blur = (value, name, id, keyCode) => {\n    if (keyCode === 27) {\n      value = this.state.fragment;\n    }\n\n    let phones = [...this.state.phones];\n    phones[id][name] = value;\n    this.setState({ phones })\n   }\n\n  hendleSort = (parSort) => {\n    if (!this.columnConfig[parSort].isSortable) return;\n    const bySort = this.state.bySort;\n\n    let phones = [...this.state.phones];\n    const phoneSort = phones.sort(function(a, b) {\n      let namea = a[parSort]\n      let  nameb = b[parSort]\n      if (namea > nameb) return bySort ? 1 : -1;\n      if (namea < nameb) return bySort ? -1 : 1;\n      return 0;\n    });\n   \n    this.setState({ phones: phoneSort, bySort: !bySort });\n  }\n\n  setCheckGlobal = () => {\n    let phones = [...this.state.phones];\n    const check = !this.state.checkGlobal;\n    phones.map((el, i) => el.visible === true ? phones[i].check = check : '')\n\n    this.setState({ checkGlobal: check, phones })\n  }\n\n  setcheck = (phone) => {\n    let selectPhone = [...this.state.phones];\n    selectPhone.map((el, i) => selectPhone[i].id === phone.id \n      ? selectPhone[i].check = !selectPhone[i].check \n      : selectPhone[i].check);\n\n    let countTrue = 0;\n    let arrPhones = this.visible();\n    arrPhones.map(el => el.check === true ? countTrue++ : '');\n    let bool = countTrue === arrPhones.length  ? true : false;\n    \n    this.setState({ phones: selectPhone, checkGlobal: bool })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}